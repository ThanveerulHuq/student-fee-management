generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String   @unique
  email     String?
  password  String
  role      Role     @default(ADMIN)
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Student {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  admissionNo   String    @unique
  aadharNo      String?
  emisNo        String?
  penNumber     String?
  udiseNumber   String?
  name          String
  gender        Gender
  dateOfBirth   DateTime
  age           Int
  community     String
  motherTongue  String
  mobileNumbers MobileNumber[]
  fatherName    String
  motherName    String
  address       String
  previousSchool String?
  religion      String
  caste         String
  nationality   String   @default("Indian")
  remarks       String?
  siblingIds    String[] @db.ObjectId
  isActive      Boolean  @default(true)
  admissionDate DateTime @default(now())
  profilePhotoUrl String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  documents   Document[]

  @@map("students")
}

model AcademicYear {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  year      String   @unique // "2024-25"
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@map("academic_years")
}

model Class {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  className String   @unique // "1st", "2nd", etc.
  order     Int      @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("classes")
}

// Fee Templates (Master Data)
model FeeTemplate {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String      @unique
  description String?
  category    FeeCategory
  isActive    Boolean     @default(true)
  order       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("fee_templates")
}

// Scholarship Templates (Master Data)
model ScholarshipTemplate {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String         @unique
  description String?
  type        ScholarshipType
  isActive    Boolean        @default(true)
  order       Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("scholarship_templates")
}

// Composite types for embedded documents
type AcademicYearInfo {
  year      String
  startDate DateTime
  endDate   DateTime
  isActive  Boolean
}

type MobileNumber {
  number     String
  isWhatsApp Boolean @default(false)
  isPrimary  Boolean @default(false)
  label      String? // "Personal", "Father", "Mother", etc.
}

type ClassInfo {
  className String
  order     Int
  isActive  Boolean
}

type FeeItem {
  id                           String      @db.ObjectId
  templateId                   String      @db.ObjectId
  templateName                 String
  templateCategory             FeeCategory
  amount                       Float
  isCompulsory                 Boolean
  isEditableDuringEnrollment   Boolean
  order                        Int
}

type ScholarshipItem {
  id              String          @db.ObjectId
  templateId      String          @db.ObjectId
  templateName    String
  templateType    ScholarshipType
  amount          Float
  isEditableDuringEnrollment   Boolean
  order           Int
}

type FeeTotals {
  compulsory Float
  optional   Float
  total      Float
}

type ScholarshipTotals {
  autoApplied Float
  manual      Float
  total       Float
}

// Fee Structures (Denormalized - Single Document)
model FeeStructure {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  academicYearId String   @db.ObjectId
  classId        String   @db.ObjectId
  name           String
  description    String?
  isActive       Boolean  @default(true)
  
  // Embedded denormalized data
  academicYear     AcademicYearInfo
  class            ClassInfo
  feeItems         FeeItem[]
  scholarshipItems ScholarshipItem[]
  
  // Computed totals
  totalFees        FeeTotals
  totalScholarships ScholarshipTotals
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([academicYearId, classId])
  @@map("fee_structures")
}

// Composite types for student enrollments
type StudentInfo {
  admissionNumber String
  name            String
  fatherName      String
  mobileNo        String 
  class           String
  status          StudentStatus
}


type StudentFee {
  id               String           @db.ObjectId
  feeItemId        String           @db.ObjectId
  templateId       String           @db.ObjectId
  templateName     String
  templateCategory FeeCategory
  amount           Float
  originalAmount   Float
  amountPaid       Float
  amountDue        Float
  isCompulsory     Boolean
}

type StudentScholarship {
  id                String          @db.ObjectId
  scholarshipItemId String          @db.ObjectId
  templateId        String          @db.ObjectId
  templateName      String
  templateType      ScholarshipType
  amount            Float
  originalAmount    Float
  isAutoApplied     Boolean
  appliedDate       DateTime
  appliedBy         String
  isActive          Boolean         @default(true)
  remarks           String?
}

type FeeAmounts {
  total      Float
  paid       Float
  due        Float
}

type ScholarshipAmounts {
  applied     Float
}

type NetAmounts {
  total Float
  paid  Float
  due   Float
}

type StudentTotals {
  fees         FeeAmounts
  scholarships ScholarshipAmounts
  netAmount    NetAmounts
}

type FeeStatus {
  status          FeeStatusType
  lastPaymentDate DateTime?
  nextDueDate     DateTime?
  overdueAmount   Float
}

// Student Enrollments (Highly Denormalized)
model StudentEnrollment {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId      String   @db.ObjectId
  academicYearId String   @db.ObjectId
  classId        String   @db.ObjectId
  section        String
  enrollmentDate DateTime @default(now())
  isActive       Boolean  @default(true)
  
  // Embedded denormalized data
  student      StudentInfo
  academicYear AcademicYearInfo
  class        ClassInfo
  
  // Student-specific fees and scholarships
  fees         StudentFee[]
  scholarships StudentScholarship[]
  
  // Pre-computed totals
  totals    StudentTotals
  feeStatus FeeStatus
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  payments Payment[]
  
  @@unique([studentId, academicYearId])
  @@map("student_enrollments")
}

// Payment Records (Moderately Denormalized)
model Payment {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  receiptNo            String   @unique
  studentEnrollmentId  String   @db.ObjectId
  totalAmount          Float
  paymentDate          DateTime @default(now())
  paymentMethod        PaymentMethod @default(CASH)
  remarks              String?
  createdBy            String
  status               String   @default("COMPLETED") // COMPLETED, PENDING, CANCELLED
  
  // Embedded student info for receipts
  student      StudentInfo
  academicYear AcademicYearInfo
  studentEnrollment StudentEnrollment @relation(fields: [studentEnrollmentId], references: [id])    
  
  // Payment breakdown
  paymentItems PaymentItem[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("payments")
}

type PaymentItem {
  id              String @db.ObjectId
  feeId           String @db.ObjectId
  feeTemplateId   String @db.ObjectId
  feeTemplateName String
  amount          Float
  feeBalance      Float
}



model Document {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  studentId String       @db.ObjectId
  fileName  String
  fileUrl   String       // Cloudinary URL
  fileType  DocumentType
  uploadDate DateTime    @default(now())
  uploadedBy String
  createdAt  DateTime    @default(now())

  student Student @relation(fields: [studentId], references: [id])

  @@map("documents")
}

model ReceiptSequence {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  academicYear String   @unique
  lastSequence Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("receipt_sequences")
}

enum Role {
  ADMIN
  STAFF
}

enum Gender {
  MALE
  FEMALE
}

enum PaymentMethod {
  CASH
  ONLINE
  CHEQUE
}

enum DocumentType {
  PHOTO
  DOCUMENT
  CERTIFICATE
}

// enum for fee structure
enum FeeCategory {
  REGULAR
  OPTIONAL
  ACTIVITY
  EXAMINATION
  LATE_FEE
}

enum ScholarshipType {
  MERIT
  NEED_BASED
  GOVERNMENT
  SPORTS
  MINORITY
  GENERAL
}

enum FeeStatusType {
  PAID
  PARTIAL
  OVERDUE
  WAIVED
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  GRADUATED
  TRANSFERRED
}
